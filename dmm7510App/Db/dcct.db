########################################################################
# Measurement Trigger source
# Desc: Measurement trigger option.

# Measurement trigger source
record(mbbo, "$(P)$(R)MeasTrg-Sel"){
  field(DESC, "Measurement trigger source")
  field(ZRST, "None")
  field(ONST, "External")
  field(TWST, "InLevel")
  field(THST, "Software")
}

# Configuration reset used by download
record(bo, "$(P)$(R)MeasTrgRst"){
  field(ASG, "Reserved")
  field(DESC, "Meas. trigger reset used by download")
  field(ZNAM, "OFF")
  field(ONAM, "ON")
  field(HIGH, "5")
  field(VAL, "0")
}

# Trigger source selection branch index calc
record(calcout, "$(P)$(R)MeasTrgCalc"){
  field(ASG, "Reserved")
  field(DESC, "Meas. trigger branch index calc")
  field(SCAN, "5 second")
  field(INPA, "$(P)$(R)MeasTrg-Sel.VAL")
  field(INPB, "$(P)$(R)MeasTrgRst.VAL")
  field(CALC, "B=0?(A+1):0")
  field(OOPT, "On Change")
  field(VAL, "7")						# Initialize in a nonexistent state
  field(OUT, "$(P)$(R)MeasTrgFout.PROC")
}

# Fanout selects config branch to be executed
record(fanout, "$(P)$(R)MeasTrgFout"){
  field(ASG, "Reserved")
  field(DESC, "Meas. trigger source config selection")
  field(SELM, "Specified")
  field(SELL, "$(P)$(R)MeasTrgCalc.VAL")
  field(LNK1, "$(P)$(R)ConfigNone")
  field(LNK2, "$(P)$(R)ConfigEx")
  field(LNK3, "$(P)$(R)ConfigLvl")
  field(LNK4, "$(P)$(R)ConfigSoft")
}

# Settings for measurement external triggering
record(sseq, "$(P)$(R)ConfigEx"){
  field(ASG, "Reserved")
  field(DESC, "Settings for meas. external trg")
  field(SELM, "All")
  field(STR1, "Passive")
  field(STR2, "RISING")
  field(STR3, "EXTERNAL")
  field(STR4, "TIMER1")
  field(STR5, "ON")
  field(STR6, ".1 second")
  field(LNK1, "$(P)$(R)SoftMeas.SCAN")				# Disable meas. software triggering
  field(LNK2, "$(Instrument)ExInEdge-Sel PP")			# External Input trigger edge = Rising
  field(LNK3, "$(Instrument)Timer1Stim-Sel PP")			# Timer 1 stimulus = EXTERNAL
  field(LNK4, "$(Instrument)MeasStim-Sel PP")			# Meas. trigger = Timer 1 (timer avoids trigger bouncing)
  field(LNK5, "$(Instrument)ClrBuff1-Cmd PP")			# Clear buffer
  field(LNK6, "$(Instrument)CntBuff1-Mon.SCAN")			# Buffer count scan triggers buffer readings
}

# Settings for measurement threshold triggering
record(sseq, "$(P)$(R)ConfigLvl"){
  field(ASG, "Reserved")
  field(DESC, "Settings for meas. threshold trg")
  field(SELM, "All")
  field(STR1, "Passive")
  field(STR2, "ANALOGTRIGGER")
  field(STR3, "TIMER1")
  field(STR4, "OFF")
  field(STR5, "Rising")
  field(STR6, "ON")
  field(STR7, ".1 second")
  field(LNK1, "$(P)$(R)SoftMeas.SCAN")				# Disable meas. software triggering
  field(LNK2, "$(Instrument)Timer1Stim-Sel PP")			# Timer 1 stimulus = ANALOGTRIGGER
  field(LNK3, "$(Instrument)MeasStim-Sel PP")			# Meas. trigger = Timer 1
  field(LNK4, "$(P)$(R)LowLimEnbl-Sel PP")			# Disable low voltage level detection
  field(LNK5, "$(Instrument)MATrEdgeSlp-Sel PP")		# Input voltage level trigger edge = Rising
  field(LNK6, "$(Instrument)ClrBuff1-Cmd PP")			# Clear buffer
  field(LNK7, "$(Instrument)CntBuff1-Mon.SCAN")			# Buffer count scan triggers buffer readings
}

# Settings for measurement software triggering
record(sseq, "$(P)$(R)ConfigSoft"){
  field(ASG, "Reserved")
  field(DESC, "Settings for meas. software trg")
  field(SELM, "All")
  field(STR1, "Passive")
  field(STR2, "NONE")
  field(STR3, "ON")
  field(STR4, ".1 second")
  field(LNK1, "$(Instrument)CntBuff1-Mon.SCAN")			# Disable buffer count scan and periodic reading fetching
  field(LNK2, "$(Instrument)MeasStim-Sel PP")			# Disable meas. hardware triggers
  field(LNK3, "$(Instrument)ClrBuff1-Cmd PP")			# Clear buffer
  field(LNK4, "$(P)$(R)SoftMeas.SCAN")				# Enable meas. software triggering
}

# Continuously trigger software measurement
record(bo, "$(P)$(R)SoftMeas"){
  field(DESC, "Force measurement when processed")
  field(ZNAM, "OFF")
  field(ONAM, "ON")
  field(VAL, "1")
  field(OUT, "$(Instrument)MeasBuff1-Cmd PP")
}

# Settings for disabling measurement trigger
record(sseq, "$(P)$(R)ConfigNone"){
  field(ASG, "Reserved")
  field(DESC, "Settings for NO measurement trigger")
  field(SELM, "All")
  field(STR1, "Passive")
  field(STR2, "NONE")
  field(STR3, "Passive")
  field(STR4, "ON")
  field(STR5, "OFF")
  field(LNK1, "$(P)$(R)SoftMeas.SCAN")				# Disable meas. software triggering
  field(LNK2, "$(Instrument)MeasStim-Sel PP")			# Meas. trigger = NONE 
  field(LNK3, "$(Instrument)CntBuff1-Mon.SCAN")			# Disable buffer count scan and periodic reading fetching
  field(LNK4, "$(Instrument)ClrBuff1-Cmd PP")			# Clear buffer
  field(LNK5, "$(P)$(R)LowLimEnbl-Sel PP")			# Disable low voltage level detection
}

# Check measurement trigger configuration and update Sts
record(scalcout, "$(P)$(R)ConfCheck1"){
  field(ASG, "Reserved")
  field(DESC, "Check calc 1 for meas. trigger config")
  field(INAA, "$(P)$(R)SoftMeas.SCAN CPP")
  field(INBB, "$(Instrument)ExInEdge-Sts CPP")
  field(INCC, "$(Instrument)MeasStim-Sts CPP")
  field(INDD, "$(Instrument)CntBuff1-Mon.SCAN CPP")
  field(INEE, "$(P)$(R)LowLimEnbl-Sts CPP")
  field(INFF, "$(Instrument)ExOutStim-Sts CPP")
  field(INGG, "$(Instrument)MATrEdgeSlp-Sts CPP")
  field(INHH, "$(Instrument)Timer1Stim-Sts CPP")
  field(CALC, "(AA=='Passive'&&BB=='RISING'&&CC=='TIMER1'&&DD=='.1 second')?1:0")
  field(FLNK, "$(P)$(R)ConfCheck2")
}

record(scalcout, "$(P)$(R)ConfCheck2"){
  field(ASG, "Reserved")
  field(DESC, "Check calc 2 for meas. trigger config")
  field(INPA, "$(P)$(R)ConfCheck1.VAL")
  field(INBB, "$(Instrument)Timer1Stim-Sts")
  field(CALC, "(A=1&&BB=='EXTERNAL')?1:0")
  field(FLNK, "$(P)$(R)ConfCheck3")
}

record(scalcout, "$(P)$(R)ConfCheck3"){
  field(ASG, "Reserved")
  field(DESC, "Check calc 3 for meas. trigger config")
  field(INAA, "$(P)$(R)SoftMeas.SCAN")
  field(INBB, "$(Instrument)MeasStim-Sts")
  field(INCC, "$(P)$(R)LowLimEnbl-Sts")
  field(INDD, "$(Instrument)ExOutStim-Sts")
  field(INEE, "$(Instrument)MATrEdgeSlp-Sts")
  field(INPF, "$(P)$(R)ConfCheck2.VAL")
  field(CALC, "F=0&&(AA=='Passive'&&BB=='TIMER1'&&CC=='OFF'&&DD=='NONE'&&EE=='Rising')?2:F")
  field(FLNK, "$(P)$(R)ConfCheck4")
}

record(scalcout, "$(P)$(R)ConfCheck4"){
  field(ASG, "Reserved")
  field(DESC, "Check calc 4 for meas. trigger config")
  field(INPA, "$(P)$(R)ConfCheck3.VAL")
  field(INPB, "$(P)$(R)ConfCheck2.VAL")
  field(INCC, "$(Instrument)CntBuff1-Mon.SCAN")
  field(INDD, "$(Instrument)Timer1Stim-Sts")
  field(CALC, "(A=2&&CC=='.1 second'&&DD=='ANALOGTRIGGER')?2:B")
  field(FLNK, "$(P)$(R)ConfCheck5")
}

record(scalcout, "$(P)$(R)ConfCheck5"){
  field(ASG, "Reserved")
  field(DESC, "Check calc 5 for meas. trigger config")
  field(INAA, "$(Instrument)MeasStim-Sts")
  field(INBB, "$(Instrument)CntBuff1-Mon.SCAN")
  field(INCC, "$(P)$(R)SoftMeas.SCAN")
  field(INPD, "$(P)$(R)ConfCheck4.VAL")
  field(CALC, "(D=0&&AA=='NONE'&&BB=='Passive'&&CC=='.1 second')?3:D")
  field(FLNK, "$(P)$(R)ConfCheck6")
}

record(scalcout, "$(P)$(R)ConfCheck6"){
  field(ASG, "Reserved")
  field(DESC, "Check calc 6 for meas. trigger config")
  field(INPA, "$(P)$(R)ConfCheck5.VAL")
  field(INBB, "$(P)$(R)SoftMeas.SCAN")
  field(INCC, "$(Instrument)MeasStim-Sts")
  field(INDD, "$(Instrument)CntBuff1-Mon.SCAN")
  field(INEE, "$(P)$(R)LowLimEnbl-Sts")
  field(CALC, "(A=0&&BB=='Passive'&&CC=='NONE'&&DD=='Passive'&&EE=='OFF')?4:A")
  field(FLNK, "$(P)$(R)ConfCheck7")
}

record(scalcout, "$(P)$(R)ConfCheck7"){
  field(ASG, "Reserved")
  field(DESC, "Check calc 7 for meas. trigger config")
  field(INPA, "$(P)$(R)ConfCheck6.VAL")
  field(CALC, "A=1?'External':(A=2?'InLevel':(A=3?'Software':(A=4?'None':'Unknown')))")
  field(OUT, "$(P)$(R)MeasTrg-Sts PP")
}

# Measurement trigger source status
record(mbbi, "$(P)$(R)MeasTrg-Sts"){
  field(ASG, "Reserved")
  field(DESC, "Measurement trigger source Sts")
  field(ZRST, "Unknown")
  field(ONST, "External")
  field(TWST, "InLevel")
  field(THST, "Software")
  field(FRST, "None")
}

########################################################################
# Timer configuration
# Desc: Timer used when measurement is triggered by level.

# Timer delay (high level)
record(ao, "$(P)$(R)TrgDelay-SP"){
  field(DESC, "Trigger delay")
  field(DRVH, "100000")
  field(DRVL, "0.000008")
  field(PREC, "6")
  field(EGU, "seconds")
  field(OUT, "$(Instrument)Timer1Dly-SP PP")
}

# Timer delay RB (high level)
record(ai, "$(P)$(R)TrgDelay-RB"){
  field(ASG, "Reserved")
  field(DESC, "Trigger delay RB")
  field(PREC, "6")
  field(EGU, "seconds")
  field(INP, "$(Instrument)Timer1Dly-RB CPP")
}

########################################################################
# Average Current Measurement
# Desc: Average Beam Current measurement parameters.

# Check if buffer 1 count is greater than 0
record(calcout, "$(P)$(R)BuffCntCalc"){
  field(ASG, "Reserved")
  field(DESC, "Buffer counter monitor calc")
  field(PRIO, "HIGH")
  field(INPA, "$(Instrument)CntBuff1-Mon CPP")
  field(CALC, "A>0")
  field(OOPT, "When Non-zero")
  field(OUT, "$(Instrument)FetchBuff1-Mon.PROC")
  field(FLNK, "$(P)$(R)BuffClear")
}

# Clear buffer after fetch was requested
record(calcout, "$(P)$(R)BuffClear"){
  field(ASG, "Reserved")
  field(DESC, "Clear buffer calc")
  field(PRIO, "HIGH")
  field(INPA, "$(P)$(R)BuffCntCalc.VAL")
  field(CALC, "A")
  field(OOPT, "When Non-zero")
  field(OUT, "$(Instrument)ClrBuff1-Cmd PP")
}

# PV with last monitored Beam Current
record(calc, "$(P)$(R)AvgCurr-Mon"){
  field(ASG, "Reserved")
  field(DESC, "Average Beam Current")
  field(PREC, "6")
  field(EGU, "mA")
  field(INPA, "$(Instrument)FetchBuff1-Mon CPP")
  field(CALC, "ABS(A)")
  field(FLNK, "$(P)$(R)CurrHstr-Mon")
}

# Array with measurement history
record(compress, "$(P)$(R)CurrHstr-Mon"){
  field(ASG, "Reserved")
  field(DESC, "History of average beam current readings")
  field(ALG, "Circular Buffer")
  field(NSAM, "1000")
  field(EGU, "mA")
  field(INP, "$(P)$(R)AvgCurr-Mon")
}

########################################################################
# Measurement Settings
# Desc: Measurement parameters.

# Measurement count (high level)
record(longout, "$(P)$(R)MeasCount-SP"){
  field(DESC, "Measurement count high level PV")
  field(DRVH, "1000000")
  field(DRVL, "1")
  field(OUT, "$(Instrument)MeasCount-SP.VAL PP")
}

# Measurement count RB (high level)
record(longin, "$(P)$(R)MeasCount-RB"){
  field(ASG, "Reserved")
  field(DESC, "Measurement count RB high level PV")
  field(INP, "$(Instrument)MeasCount-RB CPP")
}

# Input Impedance (high level)
record(bo, "$(P)$(R)Imped-Sel"){
  field(DESC, "Input impedance high level PV")
  field(ZNAM, "AUTO")
  field(ONAM, "10MOhm")
  field(VAL, "0")
  field(OUT, "$(Instrument)MeasImpedance-Sel.VAL PP")
}

# Input Impedance Sts (high level)
record(bi, "$(P)$(R)Imped-Sts"){
  field(ASG, "Reserved")
  field(DESC, "Input impedance Sts high level PV")
  field(ZNAM, "AUTO")
  field(ONAM, "10MOhm")
  field(INP, "$(Instrument)MeasImpedance-Sts CPP")
}

# Line Synchronization (high level)
record(bo, "$(P)$(R)LineSync-Sel"){
  field(DESC, "Line Sync high level PV")
  field(ZNAM, "OFF")
  field(ONAM, "ON")
  field(VAL, "0")
  field(OUT, "$(Instrument)MeasLineSync-Sel PP")
}

# Line Synchronization Sts (high level)
record(bi, "$(P)$(R)LineSync-Sts"){
  field(ASG, "Reserved")
  field(DESC, "Line Sync Sts high level PV")
  field(ZNAM, "OFF")
  field(ONAM, "ON")
  field(INP, "$(Instrument)MeasLineSync-Sts CPP")
}

# Number of power line cycles (high level)
record(ao, "$(P)$(R)NPLC-SP"){
  field(DESC, "NPLC high level PV")
  field(DRVH, "15")
  field(DRVL, "0.0005")
  field(PREC, "4")
  field(VAL, "1")
  field(EGU, "PLC")
  field(OUT, "$(Instrument)MeasNPLC-SP PP")
}

# Number of power line cycles RB (high level)
record(ai, "$(P)$(R)NPLC-RB"){
  field(ASG, "Reserved")
  field(DESC, "NPLC RB high level PV")
  field(PREC, "4")
  field(EGU, "PLC")
  field(INP, "$(Instrument)MeasNPLC-RB CPP")
}

# Filter counter (high level)
record(longout, "$(P)$(R)FilterCnt-SP"){
  field(DESC, "Filter counter high level PV")
  field(DRVH, "100")
  field(DRVL, "1")
  field(OUT, "$(Instrument)FilterCount-SP PP")
}

# Filter counter RB (high level)
record(longin, "$(P)$(R)FilterCnt-RB"){
  field(ASG, "Reserved")
  field(DESC, "Filter counter RB high level PV")
  field(INP, "$(Instrument)FilterCount-RB CPP")
}

# Filter enable (high level)
record(bo, "$(P)$(R)FilterEnbl-Sel"){
  field(DESC, "Filter enable high level PV")
  field(ZNAM, "OFF")
  field(ONAM, "ON")
  field(OUT, "$(Instrument)FilterEnbl-Sel PP")
}

# Filter enable Sts (high level)
record(bi, "$(P)$(R)FilterEnbl-Sts"){
  field(ASG, "Reserved")
  field(DESC, "Filter enable Sts high level PV")
  field(ZNAM, "OFF")
  field(ONAM, "ON")
  field(INP, "$(Instrument)FilterEnbl-Sts CPP")
}

# Filter type (high level)
record(bo, "$(P)$(R)FilterTyp-Sel"){
  field(DESC, "Filter type high level PV")
  field(ZNAM, "Repeat")
  field(ONAM, "Moving")
  field(OUT, "$(Instrument)FilterTyp-Sel PP")
}

# Filter type Sts (high level)
record(bi, "$(P)$(R)FilterTyp-Sts"){
  field(ASG, "Reserved")
  field(DESC, "Filter type Sts high level PV")
  field(ZNAM, "Repeat")
  field(ONAM, "Moving")
  field(INP, "$(Instrument)FilterTyp-Sts CPP")
}

# Filter window (high level)
record(longout, "$(P)$(R)FilterWind-SP"){
  field(DESC, "Filter window high level PV")
  field(DRVH, "10")
  field(DRVL, "0")
  field(EGU, "%")
  field(OUT, "$(Instrument)FilterWind-SP PP")
}

# Filter window RB (high level)
record(longin, "$(P)$(R)FilterWind-RB"){
  field(ASG, "Reserved")
  field(DESC, "Filter window RB high level PV")
  field(EGU, "%")
  field(INP, "$(Instrument)FilterWind-RB CPP")
}

# Relative offset enable (high level)
record(bo, "$(P)$(R)RelEnbl-Sel"){
  field(DESC, "Rel. offset enable high level PV")
  field(ZNAM, "OFF")
  field(ONAM, "ON")
  field(VAL, "0")
  field(OUT, "$(Instrument)MRelOffEnbl-Sel PP")
}

# Relative offset enable Sts (high level)
record(bi, "$(P)$(R)RelEnbl-Sts"){
  field(ASG, "Reserved")
  field(DESC, "Rel. offset enable Sts high level PV")
  field(ZNAM, "OFF")
  field(ONAM, "ON")
  field(INP, "$(Instrument)MRelOffEnbl-Sts CPP")
}

# Relative offset level (high level)
record(ao, "$(P)$(R)RelLvl-SP"){
  field(DESC, "Rel. offset level high level PV")
  field(PREC, "16")
  field(VAL, "0")
  field(OUT, "$(Instrument)MRelOff-SP PP")
}

# Relative offset level RB (high level)
record(ai, "$(P)$(R)RelLvl-RB"){
  field(ASG, "Reserved")
  field(DESC, "Rel. offset level RB high level PV")
  field(PREC, "16")
  field(INP, "$(Instrument)MRelOff-RB CPP")
}

# Relative offset acquire command (high level)
record(bo, "$(P)$(R)RelAcq-Cmd"){
  field(DESC, "Rel. offset acquire high level PV")
  field(ZNAM, "OFF")
  field(ONAM, "ON")
  field(HIGH, "0.5")
  field(FLNK, "$(P)$(R)RelAcqCalc")
}

# Relative offset acquire command validation
record(calcout, "$(P)$(R)RelAcqCalc"){
  field(ASG, "Reserved")
  field(DESC, "Rel. offset acquire calc 1")
  field(INPA, "$(P)$(R)RelAcq-Cmd.VAL")
  field(CALC, "A")
  field(OOPT, "When Non-zero")
  field(OUT, "$(P)$(R)RelAcqSeq.PROC")
}

# Process rel. offset acquire from multimeter, wait, and copy readback to set point
record(seq, "$(P)$(R)RelAcqSeq"){
  field(ASG, "Reserved")
  field(DESC, "Acquire rel. offset and update set point")
  field(PREC, "16")
  field(DO1, "1")
  field(DOL2, "$(P)$(R)RelLvl-RB.VAL")
  field(LNK1, "$(Instrument)MRelOffAcq-Cmd.VAL PP")	# acquire relative offset
  field(DLY2, "2")					# wait for 2 seconds so that readback value can be updated 
  field(LNK2, "$(P)$(R)RelLvl-SP.VAL PP")		# update rel. offset set point with readback value
}

########################################################################
# Current Measurement Range
# Desc: Measurement range selection.

# ######################################
# NPCT Pin mapping
#
# NPCT Range 1/10 = DigIO line 1
# NPCT Range 1/100 = DigIO line 2
#
# ######################################

# DCCT Range selection
record(mbbo, "$(P)$(R)Range-Sel"){
  field(DESC, "DCCT range")
  field(ZRST, "20 A")
  field(ONST, "2 A")
  field(TWST, "200 mA")
  field(THST, "20 mA")
  field(FLNK, "$(P)$(R)ConvCalc")
}

# Calculation for setting conversion multiplier
record(calcout, "$(P)$(R)ConvCalc"){
  field(ASG, "Reserved")
  field(DESC, "Reading conversion factor")
  field(INPA, "$(P)$(R)Range-Sel.VAL")
  field(CALC, "2000/(10**A)")
  field(OUT, "$(Instrument)MMathMFactor-SP PP")
  field(FLNK, "$(P)$(R)RangeCalc")
}

# Calculation for setting DCCT sensor range
# Digital I/O mapping
# DCCT 'Pin 7' = DMM 'DigIO 2'
# DCCT 'Pin 6' = DMM 'DigIO 1'
#
record(calcout, "$(P)$(R)RangeCalc"){
  field(ASG, "Reserved")
  field(DESC, "DCCT range calc")
  field(INPA, "$(P)$(R)Range-Sel")
  field(INPB, "$(P)$(R)Test-Sts")
  field(CALC, "(A=0?3:(A=1?2:(A=2?1:0)))|(((!B)&1)<<2)")
  field(OUT, "$(Instrument)DigWrite-SP PP")
  field(FLNK, "$(P)$(R)ThreshUpdate")
}

# Level threshold update
record(calcout, "$(P)$(R)ThreshUpdate"){
  field(ASG, "Reserved")
  field(DESC, "Threshold update")
  field(INPA, "$(P)$(R)Threshold-RB")
  field(INPB, "$(P)$(R)Range-Sel")
  field(CALC, "(A*(10**B))/2000")
  field(OUT, "$(Instrument)MATrEdgeLvl-SP PP")
  field(FLNK, "$(Instrument)DigRead-Mon.PROC")
}

# Range status calculation
record(scalcout, "$(P)$(R)RangeMonCalc"){
  field(ASG, "Reserved")
  field(DESC, "Calc of range from DigIO status")
  field(INPA, "$(Instrument)DigRead-Mon CPP")
  field(CALC, "(A&3)=3?'20 A':((A&3)=2?'2 A':((A&3)=1?'200 mA':'20 mA'))")
  field(OUT, "$(P)$(R)Range-Sts PP")
}

# Range status
record(mbbi, "$(P)$(R)Range-Sts"){
  field(ASG, "Reserved")
  field(DESC, "DCCT range Sts")
  field(ZRST, "UNKNOWN")
  field(ONST, "20 A")
  field(TWST, "2 A")
  field(THST, "200 mA")
  field(FRST, "20 mA")
}

########################################################################
# DCCT Calibration Setting
# Desc: DCCT calibration signal enable.

# ######################################
# NPCT Pin mapping
#
# NPCT Calibration Enable = DigIO line 3
#
# ######################################

# Enable/disable DCCT calibration signal
record(bo, "$(P)$(R)Test-Sel"){
  field(DESC, "DCCT calibration signal enable")
  field(ZNAM, "OFF")
  field(ONAM, "ON")
  field(FLNK, "$(P)$(R)TestCalc")
}

# Enable DCCT calibration signal calc
record(calcout, "$(P)$(R)TestCalc"){
  field(ASG, "Reserved")
  field(DESC, "DCCT calibration signal enable calc")
  field(INPA, "$(P)$(R)Test-Sel.VAL")
  field(CALC, "!A")
  field(OUT, "$(Instrument)Dig3State-Sel PP")
  field(FLNK, "$(Instrument)Dig3State-Mon.PROC")
}

# DCCT calibration signal enable status calc
record(calc, "$(P)$(R)TestMonCalc"){
  field(ASG, "Reserved")
  field(DESC, "DCCT cal. signal enable monitor calc")
  field(INPA, "$(Instrument)Dig3State-Mon CPP")
  field(CALC, "!A")
  field(FLNK, "$(P)$(R)Test-Sts")
}

# DCCT calibration signal enable status
record(bi, "$(P)$(R)Test-Sts"){
  field(ASG, "Reserved")
  field(DESC, "DCCT calibration signal enable Sts")
  field(ZNAM, "OFF")
  field(ONAM, "ON")
  field(INP, "$(P)$(R)TestMonCalc.VAL")
}

########################################################################
# Current Threshold Detection
# Desc: Current loss detection parameters.

# Enable/disable low current detection
record(bo, "$(P)$(R)LowLimEnbl-Sel"){
  field(DESC, "Curr. low threshold detection")
  field(ZNAM, "OFF")
  field(ONAM, "ON")
  field(FLNK, "$(P)$(R)LowLimCalc")
}

record(calc, "$(P)$(R)LowLimCalc"){
  field(ASG, "Reserved")
  field(DESC, "Low threshold settings calc")
  field(INPA, "$(P)$(R)LowLimEnbl-Sel")
  field(CALC, "A=1?3:4")
  field(FLNK, "$(P)$(R)LowLimSeq")
}

record(sseq, "$(P)$(R)LowLimSeq"){
  field(ASG, "Reserved")
  field(DESC, "Low threshold settings seq")
  field(SELM, "Mask")
  field(SELL, "$(P)$(R)LowLimCalc.VAL")
  field(STR1, "Falling")
  field(STR2, "ANALOGTRIGGER")
  field(STR3, "NONE")
  field(LNK1, "$(Instrument)MATrEdgeSlp-Sel PP")
  field(LNK2, "$(Instrument)ExOutStim-Sel PP")
  field(LNK3, "$(Instrument)ExOutStim-Sel PP")
}

record(scalcout, "$(P)$(R)LowLimCheck"){
  field(ASG, "Reserved")
  field(DESC, "Low threshold settings check")
  field(INAA, "$(Instrument)ExOutStim-Sts CPP")
  field(CALC, "AA='ANALOGTRIGGER'?'ON':'OFF'")
  field(OUT, "$(P)$(R)LowLimEnbl-Sts PP")
}

record(bi, "$(P)$(R)LowLimEnbl-Sts"){
  field(ASG, "Reserved")
  field(DESC, "Curr. low threshold detection Sts")
  field(ZNAM, "OFF")
  field(ONAM, "ON")
}

# Analog trigger threshold
record(ao, "$(P)$(R)Threshold-SP"){
  field(DESC, "Threshold level")
  field(DRVH, "2000")
  field(DRVL, "0")
  field(PREC, "6")
  field(EGU, "mA")
  field(FLNK, "$(P)$(R)ThreshCalc")
}

# Threshold unit conversion
record(calcout, "$(P)$(R)ThreshCalc"){
  field(ASG, "Reserved")
  field(DESC, "Threshold unit conversion calc")
  field(INPA, "$(P)$(R)Threshold-SP")
  field(INPB, "$(P)$(R)Range-Sts")
  field(CALC, "B=0?0:1")
  field(OCAL, "(A*(10**(B-1)))/2000")
  field(DOPT, "Use OCAL")
  field(OOPT, "When Non-zero")
  field(OUT, "$(Instrument)MATrEdgeLvl-SP PP")
}

# Monitor calc for analog trigger level
record(calcout, "$(P)$(R)ThreshMonCalc"){
  field(ASG, "Reserved")
  field(DESC, "Threshold level read calc")
  field(INPA, "$(Instrument)MATrEdgeLvl-RB CPP")
  field(INPB, "$(P)$(R)Range-Sts")
  field(CALC, "B=0?0:1")
  field(OCAL, "(A*2000)/(10**(B-1))")
  field(DOPT, "Use OCAL")
  field(OOPT, "When Non-zero")
  field(OUT, "$(P)$(R)Threshold-RB PP")
}

# Analog trigger threshold RB
record(ai, "$(P)$(R)Threshold-RB"){
  field(ASG, "Reserved")
  field(DESC, "Threshold level RB")
  field(EGU, "mA")
  field(PREC, "6")
}

# High frequency rejection (high level)
record(bo, "$(P)$(R)HFReject-Sel"){
  field(DESC, "High freq rejection high level PV")
  field(ZNAM, "OFF")
  field(ONAM, "ON")
  field(OUT, "$(Instrument)MATrHFR-Sel PP")
}

# High frequency rejection Sts (high level)
record(bi, "$(P)$(R)HFReject-Sts"){
  field(ASG, "Reserved")
  field(DESC, "High freq rejection Sts high level PV")
  field(ZNAM, "OFF")
  field(ONAM, "ON")
  field(INP, "$(Instrument)MATrHFR-Sts CPP")
}

########################################################################
# Save
# Desc: Save 'Sel' and 'SP' PV values.

record(bo, "$(P)$(R)Save-Cmd"){
  field(DESC, "Save PVs values cmd")
  field(ZNAM, "OFF")
  field(ONAM, "ON")
  field(HIGH, "0.5")
  field(FLNK, "$(P)$(R)SaveTrg")
}

# This PV is monitored by autosave
record(calc, "$(P)$(R)SaveTrg"){
  field(ASG, "Reserved")
  field(DESC, "Save PVs values trigger")
  field(INPA, "$(P)$(R)Save-Cmd.VAL")
  field(CALC, "A=1?!VAL:VAL")
  field(VAL, "0")
}

########################################################################
# Multimeter Setup
# Desc: General instrument initialization.

# ----------------------------------------------------------
# Parameter Download Sequence
# Desc: Defines the processing order during download.
# ----------------------------------------------------------

# Download command
record(bo, "$(P)$(R)Download-Cmd"){
  field(DESC, "Download IOC parameters cmd")
  field(ZNAM, "OFF")
  field(ONAM, "ON")
  field(HIGH, "10")
  field(VAL, "1")
  field(PINI, "YES")
  field(FLNK, "$(P)$(R)DownloadCalc")
}

record(calcout, "$(P)$(R)DownloadCalc"){
  field(ASG, "Reserved")
  field(DESC, "Download confirmation calc")
  field(INPA, "$(P)$(R)Download-Cmd.VAL")
  field(CALC, "A")
  field(OOPT, "When Non-zero")
  field(OUT, "$(P)$(R)DownloadSeq1.PROC")
}

record(sseq, "$(P)$(R)DownloadSeq1"){
  field(ASG, "Reserved")
  field(DESC, "Download sequence 1")
  field(SELM, "All")
  field(STR1, "ON")
  field(STR2, "DC_VOLTAGE")
  field(STR3, "OFF")
  field(STR4, "OFF")
  field(STR5, "OFF")
  field(DO6, "10")
  field(LNK1, "$(Instrument)Reset-Cmd PP")			# reset
  field(LNK2, "$(Instrument)MeasFnc-Sel PP")			# Meas. function = DC_VOLTAGE
  field(LNK3, "$(Instrument)MAutoRange-Sel PP")			# Meas. autorange = OFF
  field(LNK4, "$(Instrument)MeasAutoDly-Sel PP")		# Meas. autodelay = OFF
  field(LNK5, "$(Instrument)AutoZero-Sel PP")			# Meas. autozero = OFF
  field(LNK6, "$(Instrument)MRange-SP PP")			# Meas. range = 10 V
  field(FLNK, "$(P)$(R)DownloadSeq2")
}

record(sseq, "$(P)$(R)DownloadSeq2"){
  field(ASG, "Reserved")
  field(DESC, "Download sequence 2")
  field(SELM, "All")
  field(DO1, "1")
  field(DO2, "1")
  field(DO3, "1")
  field(DO4, "1")
  field(DO5, "1")
  field(DO6, "1")
  field(DO7, "1")
  field(DO8, "1")
  field(DO9, "1")
  field(DOA, "1")
  field(LNK1, "$(P)$(R)MeasCount-SP.PROC")			# Meas. count high level proc
  field(LNK2, "$(P)$(R)Imped-Sel.PROC")				# Meas. input impedance proc
  field(LNK3, "$(P)$(R)LineSync-Sel.PROC")			# Meas. line sync proc 
  field(LNK4, "$(P)$(R)NPLC-SP.PROC")				# Meas. NPLC proc
  field(LNK5, "$(P)$(R)RelEnbl-Sel.PROC")			# Meas. relative offset enable proc
  field(LNK6, "$(P)$(R)RelLvl-SP.PROC")				# Meas. relative offset level proc
  field(LNK7, "$(P)$(R)FilterTyp-Sel.PROC")			# Filter type proc
  field(LNK8, "$(P)$(R)FilterCnt-SP.PROC")			# Filter count proc
  field(LNK9, "$(P)$(R)FilterWind-SP.PROC")			# Filter window proc
  field(LNKA, "$(P)$(R)FilterEnbl-Sel.PROC")			# Filter enable proc
  field(FLNK, "$(P)$(R)DownloadSeq3")
}

record(sseq, "$(P)$(R)DownloadSeq3"){
  field(ASG, "Reserved")
  field(DESC, "Download sequence 3")
  field(SELM, "All")
  field(STR1, "DIGOUT")
  field(STR2, "DIGOUT")
  field(STR3, "DIGOUT")
  field(STR4, "DIGOUT")
  field(STR5, "DIGOUT")
  field(STR6, "DIGOUT")
  field(DO7, "1")
  field(DO8, "1")
  field(STR9, "ON")
  field(LNK1, "$(Instrument)Dig1Mod-Sel PP")			# DigIO 1 Mode = DIG_OUT
  field(LNK2, "$(Instrument)Dig2Mod-Sel PP")			# DigIO 2 Mode = DIG_OUT
  field(LNK3, "$(Instrument)Dig3Mod-Sel PP")			# DigIO 3 Mode = DIG_OUT
  field(LNK4, "$(Instrument)Dig4Mod-Sel PP")			# DigIO 4 Mode = DIG_OUT
  field(LNK5, "$(Instrument)Dig5Mod-Sel PP")			# DigIO 5 Mode = DIG_OUT
  field(LNK6, "$(Instrument)Dig6Mod-Sel PP")			# DigIO 6 Mode = DIG_OUT
  field(LNK7, "$(Instrument)Timer1Count-SP PP")			# Timer 1 count = 1
  field(LNK8, "$(P)$(R)TrgDelay-SP.PROC")			# Timer 1 delay proc
  field(LNK9, "$(Instrument)Timer1Enbl-Sel PP")			# Timer 1 enable
  field(FLNK, "$(P)$(R)DownloadSeq4")
}

record(sseq, "$(P)$(R)DownloadSeq4"){
  field(ASG, "Reserved")
  field(DESC, "Download sequence 4")
  field(SELM, "All")
  field(DO1, "1")
  field(DO2, "1")
  field(STR3, "y=mx+b")
  field(DO4, "0")
  field(STR5, "ON")
  field(DO6, "1")
  field(STR7, "Edge")
  field(DO8, "1")
  field(STR9, "Positive")
  field(DOA, "1")
  field(LNK1, "$(P)$(R)Range-Sel.PROC")				# Range proc
  field(LNK2, "$(P)$(R)Test-Sel.PROC")				# DCCT calibration signal enable proc
  field(LNK3, "$(Instrument)MMathOp-Sel PP")			# Math format = y=mx+b			
  field(LNK4, "$(Instrument)MMathBFactor-SP PP")		# Math B factor = 0
  field(LNK5, "$(Instrument)MMathEnbl-Sel PP")			# Math enable = ON
  field(LNK6, "$(P)$(R)Threshold-SP.PROC")			# Level threshold proc (Analog Trig level)
  field(LNK7, "$(Instrument)MATrMode-Sel PP")			# Analog trigger mode = Edge
  field(LNK8, "$(P)$(R)HFReject-Sel.PROC")			# High Freq rejection proc (Analog Trg HR reject)
  field(LNK9, "$(Instrument)ExOutPol-Sel PP")			# External Output polarity = Positive
  field(LNKA, "$(P)$(R)LowLimEnbl-Sel.PROC")			# Low limit enable proc (Analog Trg Slope and Stim)
  field(DLY3, "2")						# Wait 2 seconds for Range-Sts to be set
  field(FLNK, "$(P)$(R)DownloadSeq5")
}

record(sseq, "$(P)$(R)DownloadSeq5"){
  field(ASG, "Reserved")
  field(DESC, "Download sequence 5")
  field(SELM, "All")
  field(DO1, "1")
  field(STR2, "HIGH")
  field(STR3, "HIGH")
  field(STR4, "HIGH")
  field(DO5, "1")
  field(LNK1, "$(Instrument)DigRead-Mon.PROC")			# DigIOs states read (range RB)
  field(LNK2, "$(Instrument)CntBuff1-Mon.PRIO")			# Buffer count monitor priority = HIGH
  field(LNK3, "$(Instrument)FetchBuff1-Mon.PRIO")		# Fetch buffer priority = HIGH
  field(LNK4, "$(Instrument)ClrBuff1-Cmd.PRIO")			# Clear buffer cmd priority = HIGH
  field(LNK5, "$(P)$(R)MeasTrgRst.VAL PP")			# Reset MeasTrgCalc so that next time it will process
}

